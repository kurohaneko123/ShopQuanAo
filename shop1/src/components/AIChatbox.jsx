"use client";
import React, { useEffect, useMemo, useRef, useState } from "react";

/* ====== Mini NLP utils (kh√¥ng c·∫ßn backend) ====== */
const stripDiacritics = (s="") =>
  s.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();

const hasAny = (text, keywords=[]) => {
  const t = stripDiacritics(text);
  return keywords.some(k => t.includes(stripDiacritics(k)));
};

/* ====== Knowledge base c√°c c√¢u tr·∫£ l·ªùi (VN) ====== */
const KB = [
  {
    id: "price",
    title: "B·∫£ng gi√°",
    patterns: ["gi√°", "bao nhi√™u", "bao nhieu", "price", "b·∫£ng gi√°", "bang gia", "chi ph√≠"],
    reply:
      "Gi√° tham kh·∫£o: Basic 119k‚Äì149k, Pro 159k‚Äì219k, Premium 239k‚Äì329k (tu·ª≥ ch·∫•t li·ªáu, s·ªë l∆∞·ª£ng v√† k·ªπ thu·∫≠t in/th√™u). B·∫°n cho m√¨nh bi·∫øt s·ªë l∆∞·ª£ng v√† form √°o ƒë·ªÉ m√¨nh g·ª£i √Ω g√≥i t·ªëi ∆∞u nha!",
    cta: { label: "Xem B·∫£ng Gi√°", href: "#bang-gia" },
  },
  {
    id: "moq",
    title: "S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu",
    patterns: ["t·ªëi thi·ªÉu", "toi thieu", "min", "√≠t nh·∫•t", "it nhat", "minimum", "bao nhieu ao"],
    reply:
      "ƒê·∫∑t t·ª´ 20 √°o tr·ªü l√™n s·∫Ω c√≥ gi√° t·ªët v√† b·∫£o ƒë·∫£m ti·∫øn ƒë·ªô. N·∫øu b·∫°n c·∫ßn √≠t h∆°n, m√¨nh v·∫´n h·ªó tr·ª£ nh∆∞ng gi√° c√≥ th·ªÉ cao h∆°n m·ªôt ch√∫t nh√©.",
  },
  {
    id: "timeline",
    title: "Th·ªùi gian thi·∫øt k·∫ø & s·∫£n xu·∫•t",
    patterns: ["th·ªùi gian", "bao lau", "bao l√¢u", "thiet ke mat bao lau", "timeline", "giao hang khi nao"],
    reply:
      "Thi·∫øt k·∫ø/Mockup trong 24‚Äì48h. S·∫£n xu·∫•t th∆∞·ªùng 3‚Äì7 ng√†y sau khi duy·ªát m·∫´u (tu·ª≥ s·ªë l∆∞·ª£ng). N·∫øu c·∫ßn g·∫•p, b·∫°n n√≥i m·ªëc th·ªùi gian ƒë·ªÉ m√¨nh s·∫Øp x·∫øp ∆∞u ti√™n.",
  },
  {
    id: "material",
    title: "Ch·∫•t li·ªáu",
    patterns: ["chat lieu", "ch·∫•t li·ªáu", "v·∫£i", "vai", "cotton", "polo", "co sat", "th√™u", "in"],
    reply:
      "C√°c ch·∫•t li·ªáu ph·ªï bi·∫øn: Cotton 65/35, Cotton 100%, Polo c√° s·∫•u. K·ªπ thu·∫≠t: In l·ª•a, in chuy·ªÉn nhi·ªát, DTF, ho·∫∑c th√™u. B·∫°n mu·ªën c·∫£m gi√°c m·∫∑c m√°t hay ƒë·ª©ng form? M√¨nh g·ª£i √Ω lo·∫°i v·∫£i ph√π h·ª£p nh√©!",
  },
  {
    id: "sizes",
    title: "Size & ƒëo ni",
    patterns: ["size", "bang size", "ƒëo size", "size chart", "co nao", "chon size"],
    reply:
      "Size t·ª´ S ‚Üí 3XL. N·∫øu b·∫°n c√≥ chi·ªÅu cao/c√¢n n·∫∑ng, m√¨nh t∆∞ v·∫•n size nhanh. Ngo√†i ra c√≥ th·ªÉ mix size theo danh s√°ch l·ªõp.",
  },
  {
    id: "shipping",
    title: "Giao h√†ng",
    patterns: ["giao hang", "ship", "van chuyen", "toan quoc", "phi ship"],
    reply:
      "Giao h√†ng to√†n qu·ªëc. Mi·ªÖn ph√≠ n·ªôi th√†nh v·ªõi ƒë∆°n > 50 √°o. B·∫°n cho m√¨nh ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng th·ªùi gian v·∫≠n chuy·ªÉn nha.",
  },
  {
    id: "changes",
    title: "Ch·ªânh s·ª≠a m·∫´u",
    patterns: ["chinh sua", "sua mau", "duyet mau", "doi mau", "sua logo", "feedback"],
    reply:
      "B·∫°n ƒë∆∞·ª£c mi·ªÖn ph√≠ 2 l·∫ßn ch·ªânh s·ª≠a sau khi nh·∫≠n b·∫£n thi·∫øt k·∫ø/3D. Vui l√≤ng m√¥ t·∫£ c·ª• th·ªÉ (logo l·ªõn h∆°n, ƒë·ªïi m√†u tay √°o, th√™m slogan...) ƒë·ªÉ ƒë·ªôi thi·∫øt k·∫ø c·∫≠p nh·∫≠t nhanh.",
  },
  {
    id: "payment",
    title: "Thanh to√°n",
    patterns: ["thanh toan", "ck", "chuyen khoan", "cod", "dat coc", "pay"],
    reply:
      "H·ªó tr·ª£ COD (c·ªçc tr∆∞·ªõc v·ªõi m·ªôt s·ªë m·∫´u), chuy·ªÉn kho·∫£n ng√¢n h√†ng, ho·∫∑c thanh to√°n t·∫°i c·ª≠a h√†ng. V·ªõi ƒë∆°n s·ªë l∆∞·ª£ng l·ªõn s·∫Ω y√™u c·∫ßu c·ªçc ƒë·ªÉ ƒë·∫∑t h√†ng v·∫£i/m√†u.",
  },
  {
    id: "contact",
    title: "Li√™n h·ªá",
    patterns: ["lien he", "facebook", "zalo", "so dien thoai", "email"],
    reply:
      "B·∫°n c√≥ th·ªÉ nh·∫Øn tr·ª±c ti·∫øp t·∫°i ƒë√¢y ho·∫∑c qua trang Li√™n h·ªá. N·∫øu g·∫•p, b·∫•m n√∫t b√™n d∆∞·ªõi ƒë·ªÉ g·ªçi/nh·∫Øn nhanh nh√©.",
    cta: { label: "Li√™n h·ªá", href: "/lienhe" },
  },
];
// Gi·ªØ c·∫£ 2 h√†m
function getBotReply(userText) {
  if (!userText?.trim())
    return "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ gi√°, th·ªùi gian thi·∫øt k·∫ø, ch·∫•t li·ªáu, size, giao h√†ng, ch·ªânh s·ª≠a m·∫´u‚Ä¶";
  const hit = KB.find(item => hasAny(userText, item.patterns));
  return hit ? hit.reply : "M√¨nh ch∆∞a r√µ c√¢u h·ªèi. B·∫°n h·ªèi r√µ h∆°n gi√∫p m√¨nh nh√©!";
}

async function getBotReplyLLM(userText){
  // Sau n√†y mu·ªën d√πng API th·∫≠t th√¨ s·ª≠a t·∫°i ƒë√¢y
  const system = `
B·∫°n l√† tr·ª£ l√Ω b√°n √°o l·ªõp & k·ª∑ y·∫øu. Tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát,
∆∞u ti√™n gi√°, th·ªùi gian, ch·∫•t li·ªáu, size, giao h√†ng, ch·ªânh s·ª≠a m·∫´u.
`;
  const resp = await fetch("/api/chat", {
    method: "POST",
    headers: {"Content-Type":"application/json"},
    body: JSON.stringify({ system, user: userText })
  }).then(r=>r.json()).catch(()=>({}));
  return resp.answer || getBotReply(userText);
}

/* ====== UI Component ====== */
export default function AIChatbox() {
  const [open, setOpen] = useState(false);
  const [msg, setMsg] = useState("");
  const [messages, setMessages] = useState(() => {
    try {
      const raw = localStorage.getItem("ai_chat_history");
      return raw ? JSON.parse(raw) : [
        { role: "bot", text: "Xin ch√†o üëã M√¨nh l√† tr·ª£ l√Ω √°o l·ªõp. B·∫°n mu·ªën h·ªèi v·ªÅ gi√°, th·ªùi gian thi·∫øt k·∫ø hay ch·∫•t li·ªáu kh√¥ng?" }
      ];
    } catch { return []; }
  });

  const endRef = useRef(null);

  useEffect(() => {
    localStorage.setItem("ai_chat_history", JSON.stringify(messages));
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const quick = useMemo(() => ([
    "Gi√° tham kh·∫£o?",
    "T·ªëi thi·ªÉu bao nhi√™u √°o?",
    "Bao l√¢u c√≥ m·∫´u/thi·∫øt k·∫ø?",
    "V·∫£i n√†o m√°t, kh√¥ng nhƒÉn?",
    "C√≥ ch·ªânh s·ª≠a m·∫´u kh√¥ng?",
    "Ship to√†n qu·ªëc ch·ª©?",
  ]), []);

  const send = (content) => {
    const text = (content ?? msg).trim();
    if (!text) return;
    const userMsg = { role: "user", text };
    const botText = getBotReply(text);
    const botMsg = { role: "bot", text: botText };

    // t√¨m CTA n·∫øu c√≥
    const hit = KB.find(k => hasAny(text, k.patterns));
    const cta = hit?.cta ? { ...hit.cta } : null;

    setMessages(prev => [...prev, userMsg, botMsg, ...(cta ? [{ role: "bot-cta", text: cta.label, href: cta.href }] : [])]);
    setMsg("");
  };

  const handleQuick = (q) => send(q);

  return (
    <>
      {/* N√∫t n·ªïi */}
      <button
        onClick={() => setOpen(o => !o)}
        className="fixed bottom-6 right-6 z-50 h-14 w-14 rounded-full bg-gray-900 text-white shadow-lg hover:bg-gray-800 transition flex items-center justify-center"
        aria-label="M·ªü chat t∆∞ v·∫•n"
      >
        {open ? "√ó" : "üí¨"}
      </button>

      {/* Panel chat */}
      {open && (
        <div className="fixed bottom-24 right-6 z-50 w-80 md:w-96 rounded-2xl border bg-white shadow-2xl flex flex-col overflow-hidden">
          {/* Header */}
          <div className="px-4 py-3 bg-gray-900 text-white flex items-center justify-between">
            <div>
              <p className="font-semibold">Tr·ª£ l√Ω √Åo L·ªõp (AI)</p>
              <p className="text-xs text-gray-200">T∆∞ v·∫•n nhanh ‚Ä¢ 24/7</p>
            </div>
            <button onClick={() => setOpen(false)} className="text-white/80 hover:text-white">√ó</button>
          </div>

          {/* Quick replies */}
          <div className="px-3 py-2 flex flex-wrap gap-2 border-b bg-gray-50">
            {quick.map((q, i) => (
              <button
                key={i}
                onClick={() => handleQuick(q)}
                className="text-xs px-3 py-1 rounded-full border hover:bg-gray-900 hover:text-white transition"
              >
                {q}
              </button>
            ))}
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3">
            {messages.map((m, i) => {
              if (m.role === "bot-cta") {
                return (
                  <div key={i} className="flex">
                    <a href={m.href} className="ml-10 text-sm underline underline-offset-2 text-gray-900">{m.text} ‚Üí</a>
                  </div>
                );
              }
              const mine = m.role === "user";
              return (
                <div key={i} className={"flex " + (mine ? "justify-end" : "justify-start")}>
                  <div className={
                    "max-w-[80%] rounded-2xl px-3 py-2 text-sm " +
                    (mine ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-800")
                  }>
                    {m.text}
                  </div>
                </div>
              );
            })}
            <div ref={endRef} />
          </div>

          {/* Input */}
          <div className="p-3 border-t flex items-center gap-2">
            <input
              value={msg}
              onChange={(e)=>setMsg(e.target.value)}
              onKeyDown={(e)=> (e.key === "Enter" ? send() : null)}
              placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n‚Ä¶"
              className="flex-1 h-10 rounded-xl border px-3 outline-none focus:ring-2 focus:ring-gray-900"
            />
            <button onClick={()=>send()} className="h-10 px-4 rounded-xl bg-gray-900 text-white hover:bg-gray-800 transition">
              G·ª≠i
            </button>
          </div>
        </div>
      )}
    </>
  );
}
